{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "rpc_control_form",
    "name" : "RPC Control Form",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "rpc",
      "sizeX" : 4,
      "sizeY" : 2,
      "resources" : [ ],
      "templateHtml" : "    <form #rpcForm=\"ngForm\" (submit)=\"sendCommand()\">\r\n      <div class=\"mat-content mat-padding\" fxLayout=\"column\">\r\n        <mat-form-field class=\"mat-block\">\r\n          <mat-label>RPC method</mat-label>\r\n          <input matInput required name=\"rpcMethod\" #rpcMethodField=\"ngModel\" [(ngModel)]=\"rpcMethod\"/>\r\n          <mat-error *ngIf=\"rpcMethodField.hasError('required')\">\r\n            RPC method name is required.\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"mat-block\">\r\n          <mat-label>RPC params</mat-label>\r\n          <input matInput required name=\"rpcParams\" #rpcParamsField=\"ngModel\" [(ngModel)]=\"rpcParams\"/>\r\n          <mat-error *ngIf=\"rpcParamsField.hasError('required')\">\r\n            RPC params is required.\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <button [disabled]=\"rpcForm.invalid || !rpcForm.dirty\" mat-raised-button color=\"primary\" type=\"submit\" >\r\n          Send RPC command\r\n        </button>\r\n        <div>\r\n          <label>RPC command response</label>\r\n          <div style=\"width: 100%; height: 100px; border: solid 2px gray\" [innerHTML]=\"rpcCommandResponse\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>",
      "templateCss" : ".error {\n    font-size: 14px !important;\n    color: maroon;/*rgb(250,250,250);*/\n    background-color: transparent;\n    padding: 6px;\n}\n\n.error span {\n    margin: auto;\n}\n\n.gpio-panel {\n    padding-top: 10px;\n    white-space: nowrap;\n}\n\n.gpio-panel section[fxflex] {\n    min-width: 0px;\n}\n\n\n.switch-panel {\n    margin: 0;\n    height: 32px;\n    width: 66px;\n    min-width: 66px;\n}\n\n.switch-panel mat-slide-toggle {\n    margin: 0;\n    width: 36px;\n    min-width: 36px;\n}\n\n.switch-panel.col-0 mat-slide-toggle {\n    margin-left: 8px;\n    margin-right: 4px;\n}\n\n.switch-panel.col-1 mat-slide-toggle {\n    margin-left: 4px;\n    margin-right: 8px;\n}\n\n.gpio-row {\n    height: 32px;\n}\n\n.pin {\n    margin-top: auto;\n    margin-bottom: auto;\n    color: white;\n    font-size: 12px;\n    width: 16px;\n    min-width: 16px;\n}\n\n.switch-panel.col-0 .pin {\n    margin-left: auto;\n    padding-left: 2px;\n    text-align: right;\n}\n\n.switch-panel.col-1 .pin {\n    margin-right: auto;\n    \n    text-align: left;\n}\n\n.gpio-left-label {\n    margin-right: 8px;\n}\n\n.gpio-right-label {\n    margin-left: 8px;\n}",
      "controllerScript" : "self.onInit = function() {\r\n    \r\n    self.ctx.$scope.sendCommand = function() {\r\n        var rpcMethod = self.ctx.$scope.rpcMethod;\r\n        var rpcParams = self.ctx.$scope.rpcParams;\r\n        var timeout = self.ctx.settings.requestTimeout;\r\n        var oneWayElseTwoWay = self.ctx.settings.oneWayElseTwoWay ? true : false;\r\n\r\n        var commandObservable;\r\n        if (oneWayElseTwoWay) {\r\n            commandObservable = self.ctx.controlApi.sendOneWayCommand(rpcMethod, rpcParams, timeout);\r\n        } else {\r\n            commandObservable = self.ctx.controlApi.sendTwoWayCommand(rpcMethod, rpcParams, timeout);\r\n        }\r\n        commandObservable.subscribe(\r\n            function (response) {\r\n                console.log(\"response\")\r\n                console.log(response)\r\n                if (oneWayElseTwoWay) {\r\n                    self.ctx.$scope.rpcCommandResponse = \"Command was successfully received by device.<br> No response body because of one way command mode.\";\r\n                } else {\r\n                    self.ctx.$scope.rpcCommandResponse = \"Response from device:<br>\";                    \r\n                    self.ctx.$scope.rpcCommandResponse += JSON.stringify(response, undefined, 2);\r\n                }\r\n                self.ctx.detectChanges();\r\n            },\r\n            function (rejection) {\r\n                console.log(\"rejection\")\r\n                console.log(rejection)\r\n                self.ctx.$scope.rpcCommandResponse = \"Failed to send command to the device:<br>\"\r\n                self.ctx.$scope.rpcCommandResponse += \"Status: \" + rejection.status + \"<br>\";\r\n                self.ctx.$scope.rpcCommandResponse += \"Status text: '\" + rejection.statusText + \"'\";\r\n                self.ctx.detectChanges();\r\n            }\r\n            \r\n        );\r\n    }\r\n    \r\n}",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"oneWayElseTwoWay\": {\r\n                \"title\": \"Is One Way Command\",\r\n                \"type\": \"boolean\",\r\n                \"default\": true\r\n            },\r\n            \"requestTimeout\": {\r\n                \"title\": \"RPC request timeout\",\r\n                \"type\": \"number\",\r\n                \"default\": 500\r\n            }\r\n        },\r\n        \"required\": []\r\n    },\r\n    \"form\": [\r\n        \"oneWayElseTwoWay\",\r\n        \"requestTimeout\"\r\n    ]\r\n} ",
      "dataKeySettingsSchema" : "{}\n",
      "settingsDirective" : "tb-gpio-control-widget-settings",
      "defaultConfig" : "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"RPC Control Form\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "d02cf060-b430-11ee-941e-233b9e6154ed"
    }
  },
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}